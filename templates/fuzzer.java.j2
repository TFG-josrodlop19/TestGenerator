{# Macro for building parameters recursively #}
{% macro build_parameter(param, parent_name="", indent_level=2) %}
    {% set indent = " " * (indent_level * 4) %}
    {% set constructor_list = param.constructor or param.parameterConstructors %}
    
    {% if constructor_list %}
        {# If the parameter has a constructor, create nested parameters #}
        {% set constructor = constructor_list[0] %}

        {# Recursively build constructor parameters #}
        {% for nested_param in constructor.parameters %}
{{ build_parameter(nested_param, parent_name=parent_name + param.name + "_", indent_level=indent_level) }}
        {% endfor %}

{# Create the instance of the complex object #}
{{ indent }}{{ param.type }} {{ parent_name }}{{ param.name }} = new {{ param.type }}(
        {% for nested_param in constructor.parameters %}
{{ " " * ((indent_level + 1) * 4) }}{{ parent_name }}{{ param.name }}_{{ nested_param.name }}{% if not loop.last %},{% endif %}
        {% endfor %}
{{ indent }});
    {% else %}
        {# Simple parameter, use dataProvider directly #}
{{ indent }}{{ param.type }} {{ parent_name }}{{ param.name }} = {{ param.fuzz_method }};
    {% endif %}
{% endmacro %}

{# Macro for collecting all custom types recursively #}
{% macro collect_custom_types(params, type_list) %}
    {% for param in params %}
        {# Add the parameter type if it's custom #}
        {% if param.type and param.type.startswith('com.') and param.type not in type_list %}
            {% set _ = type_list.append(param.type) %}
        {% endif %}
        
        {# Process constructor parameters #}
        {% set constructor_list = param.constructor or param.parameterConstructors %}
        {% if constructor_list %}
            {% for constructor in constructor_list %}
                {# Add constructor's qualified name #}
                {% if constructor.qualifiedName and constructor.qualifiedName.startswith('com.') and constructor.qualifiedName not in type_list %}
                    {% set _ = type_list.append(constructor.qualifiedName) %}
                {% endif %}
                
                {# Recursively process constructor parameters #}
                {% if constructor.parameters %}
{{ collect_custom_types(constructor.parameters, type_list) }}
                {% endif %}
            {% endfor %}
        {% endif %}
    {% endfor %}
{% endmacro %}

{# Package declaration #}
{{ packageName }}

{# Basic imports #}
import com.code_intelligence.jazzer.api.FuzzedDataProvider;
import java.io.IOException;

{# Collect all custom types #}
{% set custom_types = [] %}

{# Add main qualifier type #}
{% if qualifierType and qualifierType.startswith('com.') and qualifierType not in custom_types %}
    {% set _ = custom_types.append(qualifierType) %}
{% endif %}

{# Collect from parameters #}
{{ collect_custom_types(parameters, custom_types) }}

{# Collect from constructor parameters #}
{% if constructorParameters %}
    {% for constructor in constructorParameters %}
        {% if constructor.qualifiedName and constructor.qualifiedName.startswith('com.') and constructor.qualifiedName not in custom_types %}
            {% set _ = custom_types.append(constructor.qualifiedName) %}
        {% endif %}
        {% if constructor.parameters %}
{{ collect_custom_types(constructor.parameters, custom_types) }}
        {% endif %}
    {% endfor %}
{% endif %}

{# Generate imports - remove duplicates using unique filter #}
{% for custom_type in custom_types|unique|sort %}
import {{ custom_type }};
{% endfor %}

/**
 * Fuzzer generated for class: {{ className }}.
 * Target: {% if artifactName %} method {{ artifactName }}{% else %}constructor{% endif %} in line {{ lineNumber }}.
 */
public class {{ className | default(qualifierType.split('.')[-1]) }}{{ artifactName | default("Constructor") | capitalize }}Fuzzer {

    public static void fuzzerTestOneInput(FuzzedDataProvider dataProvider) {
        
        // Generate parameters for the target method or constructor
        {% if not isStatic and nodeType != 'CtConstructorImpl' %}
            {% set instance_name = qualifierType.split('.')[-1] | lower + "_instance" %}
        {% endif %}
        {% for param in parameters %}
{{ build_parameter(param, indent_level=2).strip() }}
        {% endfor %}

        // Instance creation
        {% if not isStatic and nodeType != 'CtConstructorImpl' %}
            {% if constructorParameters and constructorParameters|length > 0 %}
                {# Generate parameters for the instance constructor #}
                {% for param in constructorParameters[0].parameters %}
{{ build_parameter(param, parent_name="constructor_", indent_level=2).strip() }}
                {% endfor %}
        
        {{ qualifierType.split('.')[-1] }} {{ instance_name }} = new {{ qualifierType.split('.')[-1] }}(
                {% for param in constructorParameters[0].parameters %}
            constructor_{{ param.name }}{% if not loop.last %},{% endif %}
                {% endfor %}
        );
            {% else %}
        {{ qualifierType.split('.')[-1] }} {{ instance_name }} = new {{ qualifierType.split('.')[-1] }}();
            {% endif %}
        {% endif %}

        // Method call
        try {
            {% if nodeType == 'CtConstructorImpl' %}
            new {{ qualifierType.split('.')[-1] }}({{ parameters | map(attribute='name') | join(', ') }});
            {% else %}
                {% if isStatic %}
            {{ qualifierType.split('.')[-1] }}.{{ artifactName }}({{ parameters | map(attribute='name') | join(', ') }});
                {% else %}
            {{ instance_name }}.{{ artifactName }}({{ parameters | map(attribute='name') | join(', ') }});
                {% endif %}
            {% endif %}
        } catch (Exception e) {
            // Catch all exceptions to prevent the fuzzer from stopping
        }
    }
}