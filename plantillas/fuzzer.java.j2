package com.example;

import com.code_intelligence.jazzer.api.FuzzedDataProvider;
// Importa la clase principal que se va a fuzear
import {{ qualifierType }};
// Importa los tipos de los parámetros que son objetos complejos
{% for param in parameters if param.constructor -%}
import {{ param.type }};
{% endfor %}
import java.io.IOException;

/**
 * Fuzzer generado para la clase {{ className }}.
 * Objetivo: {% if artifactName %}método {{ artifactName }}{% else %}constructor{% endif %} en la línea {{ lineNumber }}.
 */
public class {{ className | default(qualifierType_simple_name) }}{{ artifactName | default("Constructor") | capitalize }}Fuzzer {

    public static void fuzzerTestOneInput(FuzzedDataProvider dataProvider) {
        
        // --- Creación de la instancia (si el método no es estático ni un constructor) ---
        {% if not isStatic and nodeType != 'CtConstructorImpl' -%}
        {{ qualifierType_simple_name }} {{ instance_name }} = new {{ qualifierType_simple_name }}();
        {% endif %}

        // --- Generación de parámetros ---
        {% for param in parameters -%}
        {% if param.constructor -%}
        // CASO COMPLEJO: Es un objeto que necesita ser construido.
        // 1. Primero, generamos los parámetros para su propio constructor.
{% for nested_param in param.constructor[0].parameters %}
        {{ nested_param.type }} {{ param.name }}_{{ nested_param.name }} = dataProvider.{{ nested_param.fuzz_method }};
{% endfor %}
        
        // 2. Ahora, invocamos a su constructor con los parámetros que acabamos de generar.
        {{ param.type }} {{ param.name }} = new {{ param.type }}(
{%- for nested_param in param.constructor[0].parameters %}
            {{ param.name }}_{{ nested_param.name }}{% if not loop.last %},{% endif %}
{% endfor %}
        );

        {% else -%}
        // CASO SIMPLE: Es un tipo primitivo que podemos generar directamente.
        {{ param.type }} {{ param.name }} = dataProvider.{{ param.fuzz_method }};
        {% endif %}
        {% endfor %}

        // --- Llamada al método o constructor objetivo ---
        try {
            {% if nodeType == 'CtConstructorImpl' -%}
            // Es la llamada a un constructor
            new {{ qualifierType_simple_name }}({{ parameters | map(attribute='name') | join(', ') }});
            {% else -%}
            // Es la llamada a un método
            {% if isStatic -%}
            {{ qualifierType_simple_name }}.{{ artifactName }}({{ parameters | map(attribute='name') | join(', ') }});
            {% else -%}
            {{ instance_name }}.{{ artifactName }}({{ parameters | map(attribute='name') | join(', ') }});
            {% endif %}
            {% endif -%}
        } catch (Exception e) {
            // Ignorar excepciones esperadas
        }
    }
}