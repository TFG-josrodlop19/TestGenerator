package com.example.fuzzers;

import com.code_intelligence.jazzer.api.FuzzedDataProvider;
import {{ qualifierType }}; // Importa el tipo del objeto
import java.io.IOException; // Imports comunes para excepciones
import com.fasterxml.jackson.core.JsonProcessingException;

/**
 * Fuzzer generado automáticamente para la clase {{ className }}.
 * Objetivo: método {{ artifactName }} en la línea {{ lineNumber }}.
 */
public class {{ className }}{{ artifactName | capitalize }}Fuzzer {

    // Clase interna simple para usarla como objetivo de deserialización
    // cuando un parámetro es de tipo java.lang.Class.
    public static class FuzzableBean {
        public String fuzzedString;
        public int fuzzedInt;
    }

    public static void fuzzerTestOneInput(FuzzedDataProvider dataProvider) {
        
        // --- Creación de la instancia (si no es estático) ---
        {% if not isStatic %}
        {{ qualifierType_simple_name }} {{ instance_name }} = new {{ qualifierType_simple_name }}();
        {% endif %}

        // --- Generación de parámetros ---
        {% for param in parameters %}
        {% if param.typeAtDeclaration == "java.lang.Class" %}
        // Caso especial: El fuzzer no puede generar un tipo de clase aleatorio.
        // Usamos una clase POJO simple y predefinida como un objetivo de fuzzing válido.
        {{ param.type }} {{ param.parameterName }} = FuzzableBean.class;
        {% else %}
        {{ param.type }} {{ param.parameterName }} = dataProvider.{{ param.fuzz_method }};
        {% endif %}
        {% endfor %}

        // --- Llamada al método objetivo ---
        try {
            {% if isStatic %}
            // Llamada estática
            {{ qualifierType_simple_name }}.{{ artifactName }}({{ parameters | map(attribute='parameterName') | join(', ') }});
            {% else %}
            // Llamada de instancia
            {{ instance_name }}.{{ artifactName }}({{ parameters | map(attribute='parameterName') | join(', ') }});
            {% endif %}

        } catch (Exception e) {
            // Opcional: puedes querer ver otras excepciones inesperadas
            // e.g., throw new RuntimeException(e);
        }
    }
}