{% macro build_parameter(param, parent_name="", indent_level=2) %}
{% set indent = " " * (indent_level * 4) %}
{% set constructor_list = param.constructor or param.parameterConstructors %}
{% if constructor_list %}
{% set constructor = constructor_list[0] %}
{% for nested_param in constructor.parameters %}
{{ build_parameter(nested_param, parent_name=parent_name + param.name + "_", indent_level=indent_level) }}
{% endfor %}
{{ indent }}{{ param.type }} {{ parent_name }}{{ param.name }} = new {{ param.type }}(
{% for nested_param in constructor.parameters %}
{{ " " * ((indent_level + 1) * 4) }}{{ parent_name }}{{ param.name }}_{{ nested_param.name }}{% if not loop.last %},{% endif %}
{% endfor %}
{{ indent }});
{% else %}
{{ indent }}{{ param.type }} {{ parent_name }}{{ param.name }} = dataProvider.{{ param.fuzz_method }};
{% endif %}
{% endmacro %}
package com.example;

import com.code_intelligence.jazzer.api.FuzzedDataProvider;
import {{ qualifierType }};
{% set imports = [] %}
{% macro find_imports(params) %}
{% for param in params %}
{% set constructor_list = param.constructor or param.parameterConstructors %}
{% if constructor_list %}
{% if param.type not in imports %}{% set _ = imports.append(param.type) %}{% endif %}
{{ find_imports(constructor_list[0].parameters) }}
{% endif %}
{% endfor %}
{% endmacro %}
{{ find_imports(parameters) }}
{% for import_path in imports|unique %}
import {{ import_path }};
{% endfor %}
import java.io.IOException;

/**
 * Fuzzer generado para la clase {{ className }}.
 * Objetivo: {% if artifactName %}método {{ artifactName }}{% else %}constructor{% endif %} en la línea {{ lineNumber }}.
 */
public class {{ className | default(qualifierType_simple_name) }}{{ artifactName | default("Constructor") | capitalize }}Fuzzer {

    public static void fuzzerTestOneInput(FuzzedDataProvider dataProvider) {
        
        // --- Creación de la instancia ---
        {% if not isStatic and nodeType != 'CtConstructorImpl' %}
        {{ " " * 8 }}{{ qualifierType_simple_name }} {{ instance_name }} = new {{ qualifierType_simple_name }}();
        {% endif %}

        // --- Generación de parámetros ---
{% for param in parameters %}
{{ build_parameter(param, indent_level=2).strip() }}
{% endfor %}

        // --- Llamada al método o constructor objetivo ---
        try {
            {% if nodeType == 'CtConstructorImpl' %}
            {{ " " * 12 }}new {{ qualifierType_simple_name }}({{ parameters | map(attribute='name') | join(', ') }});
            {% else %}
            {% if isStatic %}
            {{ " " * 12 }}{{ qualifierType_simple_name }}.{{ artifactName }}({{ parameters | map(attribute='name') | join(', ') }});
            {% else %}
            {{ " " * 12 }}{{ instance_name }}.{{ artifactName }}({{ parameters | map(attribute='name') | join(', ') }});
            {% endif %}
            {% endif %}
        } catch (Exception e) {
            // Ignorar excepciones esperadas
        }
    }
}